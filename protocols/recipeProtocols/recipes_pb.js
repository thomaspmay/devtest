// source: recipes.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.recipes.Ingredient', null, global);
goog.exportSymbol('proto.recipes.Metadata', null, global);
goog.exportSymbol('proto.recipes.Recipe', null, global);
goog.exportSymbol('proto.recipes.RecipeAllRequest', null, global);
goog.exportSymbol('proto.recipes.RecipeArray', null, global);
goog.exportSymbol('proto.recipes.RecipeBrowseRequest', null, global);
goog.exportSymbol('proto.recipes.RecipeBrowseResponse', null, global);
goog.exportSymbol('proto.recipes.RecipeLibraryRequest', null, global);
goog.exportSymbol('proto.recipes.RecipeLibraryResponse', null, global);
goog.exportSymbol('proto.recipes.RecipeSearchRequest', null, global);
goog.exportSymbol('proto.recipes.RecipeSearchResponse', null, global);
goog.exportSymbol('proto.recipes.UnprocessedRecipe', null, global);
goog.exportSymbol('proto.recipes.image', null, global);
goog.exportSymbol('proto.recipes.requestResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.recipes.requestResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.recipes.requestResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.recipes.requestResponse.displayName = 'proto.recipes.requestResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.recipes.RecipeAllRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.recipes.RecipeAllRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.recipes.RecipeAllRequest.displayName = 'proto.recipes.RecipeAllRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.recipes.RecipeLibraryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.recipes.RecipeLibraryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.recipes.RecipeLibraryRequest.displayName = 'proto.recipes.RecipeLibraryRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.recipes.RecipeLibraryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.recipes.RecipeLibraryResponse.repeatedFields_, null);
};
goog.inherits(proto.recipes.RecipeLibraryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.recipes.RecipeLibraryResponse.displayName = 'proto.recipes.RecipeLibraryResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.recipes.RecipeBrowseRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.recipes.RecipeBrowseRequest.repeatedFields_, null);
};
goog.inherits(proto.recipes.RecipeBrowseRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.recipes.RecipeBrowseRequest.displayName = 'proto.recipes.RecipeBrowseRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.recipes.RecipeBrowseResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.recipes.RecipeBrowseResponse.repeatedFields_, null);
};
goog.inherits(proto.recipes.RecipeBrowseResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.recipes.RecipeBrowseResponse.displayName = 'proto.recipes.RecipeBrowseResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.recipes.RecipeSearchRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.recipes.RecipeSearchRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.recipes.RecipeSearchRequest.displayName = 'proto.recipes.RecipeSearchRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.recipes.RecipeSearchResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.recipes.RecipeSearchResponse.repeatedFields_, null);
};
goog.inherits(proto.recipes.RecipeSearchResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.recipes.RecipeSearchResponse.displayName = 'proto.recipes.RecipeSearchResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.recipes.RecipeArray = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.recipes.RecipeArray.repeatedFields_, null);
};
goog.inherits(proto.recipes.RecipeArray, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.recipes.RecipeArray.displayName = 'proto.recipes.RecipeArray';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.recipes.Recipe = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.recipes.Recipe.repeatedFields_, null);
};
goog.inherits(proto.recipes.Recipe, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.recipes.Recipe.displayName = 'proto.recipes.Recipe';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.recipes.UnprocessedRecipe = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.recipes.UnprocessedRecipe.repeatedFields_, null);
};
goog.inherits(proto.recipes.UnprocessedRecipe, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.recipes.UnprocessedRecipe.displayName = 'proto.recipes.UnprocessedRecipe';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.recipes.image = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.recipes.image, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.recipes.image.displayName = 'proto.recipes.image';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.recipes.Ingredient = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.recipes.Ingredient.repeatedFields_, null);
};
goog.inherits(proto.recipes.Ingredient, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.recipes.Ingredient.displayName = 'proto.recipes.Ingredient';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.recipes.Metadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.recipes.Metadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.recipes.Metadata.displayName = 'proto.recipes.Metadata';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.recipes.requestResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.recipes.requestResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.recipes.requestResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.recipes.requestResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    statuscode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.recipes.requestResponse}
 */
proto.recipes.requestResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.recipes.requestResponse;
  return proto.recipes.requestResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.recipes.requestResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.recipes.requestResponse}
 */
proto.recipes.requestResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatuscode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.recipes.requestResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.recipes.requestResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.recipes.requestResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.recipes.requestResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatuscode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 statusCode = 1;
 * @return {number}
 */
proto.recipes.requestResponse.prototype.getStatuscode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.recipes.requestResponse} returns this
 */
proto.recipes.requestResponse.prototype.setStatuscode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.recipes.requestResponse.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.recipes.requestResponse} returns this
 */
proto.recipes.requestResponse.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.recipes.RecipeAllRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.recipes.RecipeAllRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.recipes.RecipeAllRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.recipes.RecipeAllRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    usercredentials: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.recipes.RecipeAllRequest}
 */
proto.recipes.RecipeAllRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.recipes.RecipeAllRequest;
  return proto.recipes.RecipeAllRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.recipes.RecipeAllRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.recipes.RecipeAllRequest}
 */
proto.recipes.RecipeAllRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsercredentials(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.recipes.RecipeAllRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.recipes.RecipeAllRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.recipes.RecipeAllRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.recipes.RecipeAllRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsercredentials();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string userCredentials = 1;
 * @return {string}
 */
proto.recipes.RecipeAllRequest.prototype.getUsercredentials = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.recipes.RecipeAllRequest} returns this
 */
proto.recipes.RecipeAllRequest.prototype.setUsercredentials = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.recipes.RecipeLibraryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.recipes.RecipeLibraryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.recipes.RecipeLibraryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.recipes.RecipeLibraryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    usercredentials: jspb.Message.getFieldWithDefault(msg, 1, ""),
    lastchange: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.recipes.RecipeLibraryRequest}
 */
proto.recipes.RecipeLibraryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.recipes.RecipeLibraryRequest;
  return proto.recipes.RecipeLibraryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.recipes.RecipeLibraryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.recipes.RecipeLibraryRequest}
 */
proto.recipes.RecipeLibraryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsercredentials(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastchange(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.recipes.RecipeLibraryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.recipes.RecipeLibraryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.recipes.RecipeLibraryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.recipes.RecipeLibraryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsercredentials();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLastchange();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string userCredentials = 1;
 * @return {string}
 */
proto.recipes.RecipeLibraryRequest.prototype.getUsercredentials = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.recipes.RecipeLibraryRequest} returns this
 */
proto.recipes.RecipeLibraryRequest.prototype.setUsercredentials = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string lastChange = 2;
 * @return {string}
 */
proto.recipes.RecipeLibraryRequest.prototype.getLastchange = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.recipes.RecipeLibraryRequest} returns this
 */
proto.recipes.RecipeLibraryRequest.prototype.setLastchange = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.recipes.RecipeLibraryResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.recipes.RecipeLibraryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.recipes.RecipeLibraryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.recipes.RecipeLibraryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.recipes.RecipeLibraryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    lastchange: jspb.Message.getFieldWithDefault(msg, 1, ""),
    myrecipesList: jspb.Message.toObjectList(msg.getMyrecipesList(),
    proto.recipes.Recipe.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.recipes.RecipeLibraryResponse}
 */
proto.recipes.RecipeLibraryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.recipes.RecipeLibraryResponse;
  return proto.recipes.RecipeLibraryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.recipes.RecipeLibraryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.recipes.RecipeLibraryResponse}
 */
proto.recipes.RecipeLibraryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastchange(value);
      break;
    case 2:
      var value = new proto.recipes.Recipe;
      reader.readMessage(value,proto.recipes.Recipe.deserializeBinaryFromReader);
      msg.addMyrecipes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.recipes.RecipeLibraryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.recipes.RecipeLibraryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.recipes.RecipeLibraryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.recipes.RecipeLibraryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLastchange();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMyrecipesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.recipes.Recipe.serializeBinaryToWriter
    );
  }
};


/**
 * optional string lastChange = 1;
 * @return {string}
 */
proto.recipes.RecipeLibraryResponse.prototype.getLastchange = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.recipes.RecipeLibraryResponse} returns this
 */
proto.recipes.RecipeLibraryResponse.prototype.setLastchange = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Recipe myRecipes = 2;
 * @return {!Array<!proto.recipes.Recipe>}
 */
proto.recipes.RecipeLibraryResponse.prototype.getMyrecipesList = function() {
  return /** @type{!Array<!proto.recipes.Recipe>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.recipes.Recipe, 2));
};


/**
 * @param {!Array<!proto.recipes.Recipe>} value
 * @return {!proto.recipes.RecipeLibraryResponse} returns this
*/
proto.recipes.RecipeLibraryResponse.prototype.setMyrecipesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.recipes.Recipe=} opt_value
 * @param {number=} opt_index
 * @return {!proto.recipes.Recipe}
 */
proto.recipes.RecipeLibraryResponse.prototype.addMyrecipes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.recipes.Recipe, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.recipes.RecipeLibraryResponse} returns this
 */
proto.recipes.RecipeLibraryResponse.prototype.clearMyrecipesList = function() {
  return this.setMyrecipesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.recipes.RecipeBrowseRequest.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.recipes.RecipeBrowseRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.recipes.RecipeBrowseRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.recipes.RecipeBrowseRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.recipes.RecipeBrowseRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    newbrowserequest: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    browserequestid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pagenumber: jspb.Message.getFieldWithDefault(msg, 3, 0),
    tagsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.recipes.RecipeBrowseRequest}
 */
proto.recipes.RecipeBrowseRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.recipes.RecipeBrowseRequest;
  return proto.recipes.RecipeBrowseRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.recipes.RecipeBrowseRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.recipes.RecipeBrowseRequest}
 */
proto.recipes.RecipeBrowseRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNewbrowserequest(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBrowserequestid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPagenumber(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addTags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.recipes.RecipeBrowseRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.recipes.RecipeBrowseRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.recipes.RecipeBrowseRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.recipes.RecipeBrowseRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNewbrowserequest();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getBrowserequestid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPagenumber();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * optional bool newBrowseRequest = 1;
 * @return {boolean}
 */
proto.recipes.RecipeBrowseRequest.prototype.getNewbrowserequest = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.recipes.RecipeBrowseRequest} returns this
 */
proto.recipes.RecipeBrowseRequest.prototype.setNewbrowserequest = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional int32 browseRequestID = 2;
 * @return {number}
 */
proto.recipes.RecipeBrowseRequest.prototype.getBrowserequestid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.recipes.RecipeBrowseRequest} returns this
 */
proto.recipes.RecipeBrowseRequest.prototype.setBrowserequestid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 pageNumber = 3;
 * @return {number}
 */
proto.recipes.RecipeBrowseRequest.prototype.getPagenumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.recipes.RecipeBrowseRequest} returns this
 */
proto.recipes.RecipeBrowseRequest.prototype.setPagenumber = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated string tags = 4;
 * @return {!Array<string>}
 */
proto.recipes.RecipeBrowseRequest.prototype.getTagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.recipes.RecipeBrowseRequest} returns this
 */
proto.recipes.RecipeBrowseRequest.prototype.setTagsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.recipes.RecipeBrowseRequest} returns this
 */
proto.recipes.RecipeBrowseRequest.prototype.addTags = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.recipes.RecipeBrowseRequest} returns this
 */
proto.recipes.RecipeBrowseRequest.prototype.clearTagsList = function() {
  return this.setTagsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.recipes.RecipeBrowseResponse.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.recipes.RecipeBrowseResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.recipes.RecipeBrowseResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.recipes.RecipeBrowseResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.recipes.RecipeBrowseResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    browserequestid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pagenumber: jspb.Message.getFieldWithDefault(msg, 2, 0),
    tagsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    recipesList: jspb.Message.toObjectList(msg.getRecipesList(),
    proto.recipes.Recipe.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.recipes.RecipeBrowseResponse}
 */
proto.recipes.RecipeBrowseResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.recipes.RecipeBrowseResponse;
  return proto.recipes.RecipeBrowseResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.recipes.RecipeBrowseResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.recipes.RecipeBrowseResponse}
 */
proto.recipes.RecipeBrowseResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBrowserequestid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPagenumber(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addTags(value);
      break;
    case 4:
      var value = new proto.recipes.Recipe;
      reader.readMessage(value,proto.recipes.Recipe.deserializeBinaryFromReader);
      msg.addRecipes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.recipes.RecipeBrowseResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.recipes.RecipeBrowseResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.recipes.RecipeBrowseResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.recipes.RecipeBrowseResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBrowserequestid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPagenumber();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getRecipesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.recipes.Recipe.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 browseRequestID = 1;
 * @return {number}
 */
proto.recipes.RecipeBrowseResponse.prototype.getBrowserequestid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.recipes.RecipeBrowseResponse} returns this
 */
proto.recipes.RecipeBrowseResponse.prototype.setBrowserequestid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 pageNumber = 2;
 * @return {number}
 */
proto.recipes.RecipeBrowseResponse.prototype.getPagenumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.recipes.RecipeBrowseResponse} returns this
 */
proto.recipes.RecipeBrowseResponse.prototype.setPagenumber = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated string tags = 3;
 * @return {!Array<string>}
 */
proto.recipes.RecipeBrowseResponse.prototype.getTagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.recipes.RecipeBrowseResponse} returns this
 */
proto.recipes.RecipeBrowseResponse.prototype.setTagsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.recipes.RecipeBrowseResponse} returns this
 */
proto.recipes.RecipeBrowseResponse.prototype.addTags = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.recipes.RecipeBrowseResponse} returns this
 */
proto.recipes.RecipeBrowseResponse.prototype.clearTagsList = function() {
  return this.setTagsList([]);
};


/**
 * repeated Recipe recipes = 4;
 * @return {!Array<!proto.recipes.Recipe>}
 */
proto.recipes.RecipeBrowseResponse.prototype.getRecipesList = function() {
  return /** @type{!Array<!proto.recipes.Recipe>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.recipes.Recipe, 4));
};


/**
 * @param {!Array<!proto.recipes.Recipe>} value
 * @return {!proto.recipes.RecipeBrowseResponse} returns this
*/
proto.recipes.RecipeBrowseResponse.prototype.setRecipesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.recipes.Recipe=} opt_value
 * @param {number=} opt_index
 * @return {!proto.recipes.Recipe}
 */
proto.recipes.RecipeBrowseResponse.prototype.addRecipes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.recipes.Recipe, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.recipes.RecipeBrowseResponse} returns this
 */
proto.recipes.RecipeBrowseResponse.prototype.clearRecipesList = function() {
  return this.setRecipesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.recipes.RecipeSearchRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.recipes.RecipeSearchRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.recipes.RecipeSearchRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.recipes.RecipeSearchRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: jspb.Message.getFieldWithDefault(msg, 1, ""),
    resultspage: jspb.Message.getFieldWithDefault(msg, 2, 0),
    usercredentials: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.recipes.RecipeSearchRequest}
 */
proto.recipes.RecipeSearchRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.recipes.RecipeSearchRequest;
  return proto.recipes.RecipeSearchRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.recipes.RecipeSearchRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.recipes.RecipeSearchRequest}
 */
proto.recipes.RecipeSearchRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setResultspage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsercredentials(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.recipes.RecipeSearchRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.recipes.RecipeSearchRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.recipes.RecipeSearchRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.recipes.RecipeSearchRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResultspage();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getUsercredentials();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string query = 1;
 * @return {string}
 */
proto.recipes.RecipeSearchRequest.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.recipes.RecipeSearchRequest} returns this
 */
proto.recipes.RecipeSearchRequest.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 resultsPage = 2;
 * @return {number}
 */
proto.recipes.RecipeSearchRequest.prototype.getResultspage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.recipes.RecipeSearchRequest} returns this
 */
proto.recipes.RecipeSearchRequest.prototype.setResultspage = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string userCredentials = 3;
 * @return {string}
 */
proto.recipes.RecipeSearchRequest.prototype.getUsercredentials = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.recipes.RecipeSearchRequest} returns this
 */
proto.recipes.RecipeSearchRequest.prototype.setUsercredentials = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.recipes.RecipeSearchResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.recipes.RecipeSearchResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.recipes.RecipeSearchResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.recipes.RecipeSearchResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.recipes.RecipeSearchResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    queryrespondedtoo: jspb.Message.getFieldWithDefault(msg, 1, ""),
    resultspage: jspb.Message.getFieldWithDefault(msg, 2, 0),
    recipesList: jspb.Message.toObjectList(msg.getRecipesList(),
    proto.recipes.Recipe.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.recipes.RecipeSearchResponse}
 */
proto.recipes.RecipeSearchResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.recipes.RecipeSearchResponse;
  return proto.recipes.RecipeSearchResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.recipes.RecipeSearchResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.recipes.RecipeSearchResponse}
 */
proto.recipes.RecipeSearchResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQueryrespondedtoo(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setResultspage(value);
      break;
    case 3:
      var value = new proto.recipes.Recipe;
      reader.readMessage(value,proto.recipes.Recipe.deserializeBinaryFromReader);
      msg.addRecipes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.recipes.RecipeSearchResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.recipes.RecipeSearchResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.recipes.RecipeSearchResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.recipes.RecipeSearchResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQueryrespondedtoo();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResultspage();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getRecipesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.recipes.Recipe.serializeBinaryToWriter
    );
  }
};


/**
 * optional string queryRespondedToo = 1;
 * @return {string}
 */
proto.recipes.RecipeSearchResponse.prototype.getQueryrespondedtoo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.recipes.RecipeSearchResponse} returns this
 */
proto.recipes.RecipeSearchResponse.prototype.setQueryrespondedtoo = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 resultsPage = 2;
 * @return {number}
 */
proto.recipes.RecipeSearchResponse.prototype.getResultspage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.recipes.RecipeSearchResponse} returns this
 */
proto.recipes.RecipeSearchResponse.prototype.setResultspage = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated Recipe recipes = 3;
 * @return {!Array<!proto.recipes.Recipe>}
 */
proto.recipes.RecipeSearchResponse.prototype.getRecipesList = function() {
  return /** @type{!Array<!proto.recipes.Recipe>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.recipes.Recipe, 3));
};


/**
 * @param {!Array<!proto.recipes.Recipe>} value
 * @return {!proto.recipes.RecipeSearchResponse} returns this
*/
proto.recipes.RecipeSearchResponse.prototype.setRecipesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.recipes.Recipe=} opt_value
 * @param {number=} opt_index
 * @return {!proto.recipes.Recipe}
 */
proto.recipes.RecipeSearchResponse.prototype.addRecipes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.recipes.Recipe, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.recipes.RecipeSearchResponse} returns this
 */
proto.recipes.RecipeSearchResponse.prototype.clearRecipesList = function() {
  return this.setRecipesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.recipes.RecipeArray.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.recipes.RecipeArray.prototype.toObject = function(opt_includeInstance) {
  return proto.recipes.RecipeArray.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.recipes.RecipeArray} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.recipes.RecipeArray.toObject = function(includeInstance, msg) {
  var f, obj = {
    recipesList: jspb.Message.toObjectList(msg.getRecipesList(),
    proto.recipes.Recipe.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.recipes.RecipeArray}
 */
proto.recipes.RecipeArray.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.recipes.RecipeArray;
  return proto.recipes.RecipeArray.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.recipes.RecipeArray} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.recipes.RecipeArray}
 */
proto.recipes.RecipeArray.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.recipes.Recipe;
      reader.readMessage(value,proto.recipes.Recipe.deserializeBinaryFromReader);
      msg.addRecipes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.recipes.RecipeArray.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.recipes.RecipeArray.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.recipes.RecipeArray} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.recipes.RecipeArray.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecipesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.recipes.Recipe.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Recipe recipes = 1;
 * @return {!Array<!proto.recipes.Recipe>}
 */
proto.recipes.RecipeArray.prototype.getRecipesList = function() {
  return /** @type{!Array<!proto.recipes.Recipe>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.recipes.Recipe, 1));
};


/**
 * @param {!Array<!proto.recipes.Recipe>} value
 * @return {!proto.recipes.RecipeArray} returns this
*/
proto.recipes.RecipeArray.prototype.setRecipesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.recipes.Recipe=} opt_value
 * @param {number=} opt_index
 * @return {!proto.recipes.Recipe}
 */
proto.recipes.RecipeArray.prototype.addRecipes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.recipes.Recipe, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.recipes.RecipeArray} returns this
 */
proto.recipes.RecipeArray.prototype.clearRecipesList = function() {
  return this.setRecipesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.recipes.Recipe.repeatedFields_ = [5,6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.recipes.Recipe.prototype.toObject = function(opt_includeInstance) {
  return proto.recipes.Recipe.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.recipes.Recipe} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.recipes.Recipe.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    title: jspb.Message.getFieldWithDefault(msg, 2, ""),
    desc: jspb.Message.getFieldWithDefault(msg, 3, ""),
    image: (f = msg.getImage()) && proto.recipes.image.toObject(includeInstance, f),
    instructionsList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    ingredientsList: jspb.Message.toObjectList(msg.getIngredientsList(),
    proto.recipes.Ingredient.toObject, includeInstance),
    tagsList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
    metadata: (f = msg.getMetadata()) && proto.recipes.Metadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.recipes.Recipe}
 */
proto.recipes.Recipe.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.recipes.Recipe;
  return proto.recipes.Recipe.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.recipes.Recipe} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.recipes.Recipe}
 */
proto.recipes.Recipe.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesc(value);
      break;
    case 4:
      var value = new proto.recipes.image;
      reader.readMessage(value,proto.recipes.image.deserializeBinaryFromReader);
      msg.setImage(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addInstructions(value);
      break;
    case 6:
      var value = new proto.recipes.Ingredient;
      reader.readMessage(value,proto.recipes.Ingredient.deserializeBinaryFromReader);
      msg.addIngredients(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addTags(value);
      break;
    case 8:
      var value = new proto.recipes.Metadata;
      reader.readMessage(value,proto.recipes.Metadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.recipes.Recipe.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.recipes.Recipe.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.recipes.Recipe} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.recipes.Recipe.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDesc();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getImage();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.recipes.image.serializeBinaryToWriter
    );
  }
  f = message.getInstructionsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getIngredientsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.recipes.Ingredient.serializeBinaryToWriter
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.recipes.Metadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.recipes.Recipe.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.recipes.Recipe} returns this
 */
proto.recipes.Recipe.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string title = 2;
 * @return {string}
 */
proto.recipes.Recipe.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.recipes.Recipe} returns this
 */
proto.recipes.Recipe.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string desc = 3;
 * @return {string}
 */
proto.recipes.Recipe.prototype.getDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.recipes.Recipe} returns this
 */
proto.recipes.Recipe.prototype.setDesc = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional image image = 4;
 * @return {?proto.recipes.image}
 */
proto.recipes.Recipe.prototype.getImage = function() {
  return /** @type{?proto.recipes.image} */ (
    jspb.Message.getWrapperField(this, proto.recipes.image, 4));
};


/**
 * @param {?proto.recipes.image|undefined} value
 * @return {!proto.recipes.Recipe} returns this
*/
proto.recipes.Recipe.prototype.setImage = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.recipes.Recipe} returns this
 */
proto.recipes.Recipe.prototype.clearImage = function() {
  return this.setImage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.recipes.Recipe.prototype.hasImage = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated string instructions = 5;
 * @return {!Array<string>}
 */
proto.recipes.Recipe.prototype.getInstructionsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.recipes.Recipe} returns this
 */
proto.recipes.Recipe.prototype.setInstructionsList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.recipes.Recipe} returns this
 */
proto.recipes.Recipe.prototype.addInstructions = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.recipes.Recipe} returns this
 */
proto.recipes.Recipe.prototype.clearInstructionsList = function() {
  return this.setInstructionsList([]);
};


/**
 * repeated Ingredient ingredients = 6;
 * @return {!Array<!proto.recipes.Ingredient>}
 */
proto.recipes.Recipe.prototype.getIngredientsList = function() {
  return /** @type{!Array<!proto.recipes.Ingredient>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.recipes.Ingredient, 6));
};


/**
 * @param {!Array<!proto.recipes.Ingredient>} value
 * @return {!proto.recipes.Recipe} returns this
*/
proto.recipes.Recipe.prototype.setIngredientsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.recipes.Ingredient=} opt_value
 * @param {number=} opt_index
 * @return {!proto.recipes.Ingredient}
 */
proto.recipes.Recipe.prototype.addIngredients = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.recipes.Ingredient, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.recipes.Recipe} returns this
 */
proto.recipes.Recipe.prototype.clearIngredientsList = function() {
  return this.setIngredientsList([]);
};


/**
 * repeated string tags = 7;
 * @return {!Array<string>}
 */
proto.recipes.Recipe.prototype.getTagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.recipes.Recipe} returns this
 */
proto.recipes.Recipe.prototype.setTagsList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.recipes.Recipe} returns this
 */
proto.recipes.Recipe.prototype.addTags = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.recipes.Recipe} returns this
 */
proto.recipes.Recipe.prototype.clearTagsList = function() {
  return this.setTagsList([]);
};


/**
 * optional Metadata metadata = 8;
 * @return {?proto.recipes.Metadata}
 */
proto.recipes.Recipe.prototype.getMetadata = function() {
  return /** @type{?proto.recipes.Metadata} */ (
    jspb.Message.getWrapperField(this, proto.recipes.Metadata, 8));
};


/**
 * @param {?proto.recipes.Metadata|undefined} value
 * @return {!proto.recipes.Recipe} returns this
*/
proto.recipes.Recipe.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.recipes.Recipe} returns this
 */
proto.recipes.Recipe.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.recipes.Recipe.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.recipes.UnprocessedRecipe.repeatedFields_ = [5,6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.recipes.UnprocessedRecipe.prototype.toObject = function(opt_includeInstance) {
  return proto.recipes.UnprocessedRecipe.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.recipes.UnprocessedRecipe} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.recipes.UnprocessedRecipe.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    title: jspb.Message.getFieldWithDefault(msg, 2, ""),
    desc: jspb.Message.getFieldWithDefault(msg, 3, ""),
    image: (f = msg.getImage()) && proto.recipes.image.toObject(includeInstance, f),
    instructionsList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    ingredientsList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    tagsList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
    metadata: (f = msg.getMetadata()) && proto.recipes.Metadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.recipes.UnprocessedRecipe}
 */
proto.recipes.UnprocessedRecipe.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.recipes.UnprocessedRecipe;
  return proto.recipes.UnprocessedRecipe.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.recipes.UnprocessedRecipe} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.recipes.UnprocessedRecipe}
 */
proto.recipes.UnprocessedRecipe.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesc(value);
      break;
    case 4:
      var value = new proto.recipes.image;
      reader.readMessage(value,proto.recipes.image.deserializeBinaryFromReader);
      msg.setImage(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addInstructions(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addIngredients(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addTags(value);
      break;
    case 8:
      var value = new proto.recipes.Metadata;
      reader.readMessage(value,proto.recipes.Metadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.recipes.UnprocessedRecipe.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.recipes.UnprocessedRecipe.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.recipes.UnprocessedRecipe} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.recipes.UnprocessedRecipe.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDesc();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getImage();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.recipes.image.serializeBinaryToWriter
    );
  }
  f = message.getInstructionsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getIngredientsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.recipes.Metadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.recipes.UnprocessedRecipe.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.recipes.UnprocessedRecipe} returns this
 */
proto.recipes.UnprocessedRecipe.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string title = 2;
 * @return {string}
 */
proto.recipes.UnprocessedRecipe.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.recipes.UnprocessedRecipe} returns this
 */
proto.recipes.UnprocessedRecipe.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string desc = 3;
 * @return {string}
 */
proto.recipes.UnprocessedRecipe.prototype.getDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.recipes.UnprocessedRecipe} returns this
 */
proto.recipes.UnprocessedRecipe.prototype.setDesc = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional image image = 4;
 * @return {?proto.recipes.image}
 */
proto.recipes.UnprocessedRecipe.prototype.getImage = function() {
  return /** @type{?proto.recipes.image} */ (
    jspb.Message.getWrapperField(this, proto.recipes.image, 4));
};


/**
 * @param {?proto.recipes.image|undefined} value
 * @return {!proto.recipes.UnprocessedRecipe} returns this
*/
proto.recipes.UnprocessedRecipe.prototype.setImage = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.recipes.UnprocessedRecipe} returns this
 */
proto.recipes.UnprocessedRecipe.prototype.clearImage = function() {
  return this.setImage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.recipes.UnprocessedRecipe.prototype.hasImage = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated string instructions = 5;
 * @return {!Array<string>}
 */
proto.recipes.UnprocessedRecipe.prototype.getInstructionsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.recipes.UnprocessedRecipe} returns this
 */
proto.recipes.UnprocessedRecipe.prototype.setInstructionsList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.recipes.UnprocessedRecipe} returns this
 */
proto.recipes.UnprocessedRecipe.prototype.addInstructions = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.recipes.UnprocessedRecipe} returns this
 */
proto.recipes.UnprocessedRecipe.prototype.clearInstructionsList = function() {
  return this.setInstructionsList([]);
};


/**
 * repeated string ingredients = 6;
 * @return {!Array<string>}
 */
proto.recipes.UnprocessedRecipe.prototype.getIngredientsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.recipes.UnprocessedRecipe} returns this
 */
proto.recipes.UnprocessedRecipe.prototype.setIngredientsList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.recipes.UnprocessedRecipe} returns this
 */
proto.recipes.UnprocessedRecipe.prototype.addIngredients = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.recipes.UnprocessedRecipe} returns this
 */
proto.recipes.UnprocessedRecipe.prototype.clearIngredientsList = function() {
  return this.setIngredientsList([]);
};


/**
 * repeated string tags = 7;
 * @return {!Array<string>}
 */
proto.recipes.UnprocessedRecipe.prototype.getTagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.recipes.UnprocessedRecipe} returns this
 */
proto.recipes.UnprocessedRecipe.prototype.setTagsList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.recipes.UnprocessedRecipe} returns this
 */
proto.recipes.UnprocessedRecipe.prototype.addTags = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.recipes.UnprocessedRecipe} returns this
 */
proto.recipes.UnprocessedRecipe.prototype.clearTagsList = function() {
  return this.setTagsList([]);
};


/**
 * optional Metadata metadata = 8;
 * @return {?proto.recipes.Metadata}
 */
proto.recipes.UnprocessedRecipe.prototype.getMetadata = function() {
  return /** @type{?proto.recipes.Metadata} */ (
    jspb.Message.getWrapperField(this, proto.recipes.Metadata, 8));
};


/**
 * @param {?proto.recipes.Metadata|undefined} value
 * @return {!proto.recipes.UnprocessedRecipe} returns this
*/
proto.recipes.UnprocessedRecipe.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.recipes.UnprocessedRecipe} returns this
 */
proto.recipes.UnprocessedRecipe.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.recipes.UnprocessedRecipe.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.recipes.image.prototype.toObject = function(opt_includeInstance) {
  return proto.recipes.image.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.recipes.image} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.recipes.image.toObject = function(includeInstance, msg) {
  var f, obj = {
    imagename: jspb.Message.getFieldWithDefault(msg, 1, ""),
    imageformat: jspb.Message.getFieldWithDefault(msg, 2, ""),
    image: msg.getImage_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.recipes.image}
 */
proto.recipes.image.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.recipes.image;
  return proto.recipes.image.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.recipes.image} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.recipes.image}
 */
proto.recipes.image.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setImagename(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setImageformat(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setImage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.recipes.image.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.recipes.image.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.recipes.image} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.recipes.image.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getImagename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getImageformat();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getImage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string imageName = 1;
 * @return {string}
 */
proto.recipes.image.prototype.getImagename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.recipes.image} returns this
 */
proto.recipes.image.prototype.setImagename = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string imageFormat = 2;
 * @return {string}
 */
proto.recipes.image.prototype.getImageformat = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.recipes.image} returns this
 */
proto.recipes.image.prototype.setImageformat = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes image = 3;
 * @return {!(string|Uint8Array)}
 */
proto.recipes.image.prototype.getImage = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes image = 3;
 * This is a type-conversion wrapper around `getImage()`
 * @return {string}
 */
proto.recipes.image.prototype.getImage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getImage()));
};


/**
 * optional bytes image = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getImage()`
 * @return {!Uint8Array}
 */
proto.recipes.image.prototype.getImage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getImage()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.recipes.image} returns this
 */
proto.recipes.image.prototype.setImage = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.recipes.Ingredient.repeatedFields_ = [10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.recipes.Ingredient.prototype.toObject = function(opt_includeInstance) {
  return proto.recipes.Ingredient.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.recipes.Ingredient} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.recipes.Ingredient.toObject = function(includeInstance, msg) {
  var f, obj = {
    text: jspb.Message.getFieldWithDefault(msg, 1, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    lbamount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    ubamount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    unittype: jspb.Message.getFieldWithDefault(msg, 5, 0),
    samount: jspb.Message.getFieldWithDefault(msg, 6, 0),
    sunittype: jspb.Message.getFieldWithDefault(msg, 7, 0),
    crucial: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    name: jspb.Message.getFieldWithDefault(msg, 9, ""),
    tagsList: (f = jspb.Message.getRepeatedField(msg, 10)) == null ? undefined : f,
    metadata: (f = msg.getMetadata()) && proto.recipes.Metadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.recipes.Ingredient}
 */
proto.recipes.Ingredient.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.recipes.Ingredient;
  return proto.recipes.Ingredient.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.recipes.Ingredient} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.recipes.Ingredient}
 */
proto.recipes.Ingredient.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAmount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLbamount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUbamount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnittype(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSamount(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSunittype(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCrucial(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.addTags(value);
      break;
    case 11:
      var value = new proto.recipes.Metadata;
      reader.readMessage(value,proto.recipes.Metadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.recipes.Ingredient.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.recipes.Ingredient.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.recipes.Ingredient} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.recipes.Ingredient.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getLbamount();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getUbamount();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getUnittype();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getSamount();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getSunittype();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getCrucial();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      10,
      f
    );
  }
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.recipes.Metadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional string text = 1;
 * @return {string}
 */
proto.recipes.Ingredient.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.recipes.Ingredient} returns this
 */
proto.recipes.Ingredient.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 amount = 2;
 * @return {number}
 */
proto.recipes.Ingredient.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.recipes.Ingredient} returns this
 */
proto.recipes.Ingredient.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 lbamount = 3;
 * @return {number}
 */
proto.recipes.Ingredient.prototype.getLbamount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.recipes.Ingredient} returns this
 */
proto.recipes.Ingredient.prototype.setLbamount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 ubamount = 4;
 * @return {number}
 */
proto.recipes.Ingredient.prototype.getUbamount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.recipes.Ingredient} returns this
 */
proto.recipes.Ingredient.prototype.setUbamount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 unitType = 5;
 * @return {number}
 */
proto.recipes.Ingredient.prototype.getUnittype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.recipes.Ingredient} returns this
 */
proto.recipes.Ingredient.prototype.setUnittype = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 sAmount = 6;
 * @return {number}
 */
proto.recipes.Ingredient.prototype.getSamount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.recipes.Ingredient} returns this
 */
proto.recipes.Ingredient.prototype.setSamount = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 sUnitType = 7;
 * @return {number}
 */
proto.recipes.Ingredient.prototype.getSunittype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.recipes.Ingredient} returns this
 */
proto.recipes.Ingredient.prototype.setSunittype = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bool crucial = 8;
 * @return {boolean}
 */
proto.recipes.Ingredient.prototype.getCrucial = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.recipes.Ingredient} returns this
 */
proto.recipes.Ingredient.prototype.setCrucial = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional string name = 9;
 * @return {string}
 */
proto.recipes.Ingredient.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.recipes.Ingredient} returns this
 */
proto.recipes.Ingredient.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * repeated string tags = 10;
 * @return {!Array<string>}
 */
proto.recipes.Ingredient.prototype.getTagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 10));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.recipes.Ingredient} returns this
 */
proto.recipes.Ingredient.prototype.setTagsList = function(value) {
  return jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.recipes.Ingredient} returns this
 */
proto.recipes.Ingredient.prototype.addTags = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.recipes.Ingredient} returns this
 */
proto.recipes.Ingredient.prototype.clearTagsList = function() {
  return this.setTagsList([]);
};


/**
 * optional Metadata metadata = 11;
 * @return {?proto.recipes.Metadata}
 */
proto.recipes.Ingredient.prototype.getMetadata = function() {
  return /** @type{?proto.recipes.Metadata} */ (
    jspb.Message.getWrapperField(this, proto.recipes.Metadata, 11));
};


/**
 * @param {?proto.recipes.Metadata|undefined} value
 * @return {!proto.recipes.Ingredient} returns this
*/
proto.recipes.Ingredient.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.recipes.Ingredient} returns this
 */
proto.recipes.Ingredient.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.recipes.Ingredient.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 11) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.recipes.Metadata.prototype.toObject = function(opt_includeInstance) {
  return proto.recipes.Metadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.recipes.Metadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.recipes.Metadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    cooktime: jspb.Message.getFieldWithDefault(msg, 1, 0),
    difficulty: jspb.Message.getFieldWithDefault(msg, 2, 0),
    serves: jspb.Message.getFieldWithDefault(msg, 3, 0),
    kcal: jspb.Message.getFieldWithDefault(msg, 4, 0),
    fat: jspb.Message.getFieldWithDefault(msg, 5, 0),
    saturates: jspb.Message.getFieldWithDefault(msg, 6, 0),
    carbs: jspb.Message.getFieldWithDefault(msg, 7, 0),
    sugar: jspb.Message.getFieldWithDefault(msg, 8, 0),
    fibre: jspb.Message.getFieldWithDefault(msg, 9, 0),
    protein: jspb.Message.getFieldWithDefault(msg, 10, 0),
    salt: jspb.Message.getFieldWithDefault(msg, 11, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.recipes.Metadata}
 */
proto.recipes.Metadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.recipes.Metadata;
  return proto.recipes.Metadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.recipes.Metadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.recipes.Metadata}
 */
proto.recipes.Metadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCooktime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDifficulty(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setServes(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setKcal(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFat(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSaturates(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCarbs(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSugar(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFibre(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProtein(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSalt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.recipes.Metadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.recipes.Metadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.recipes.Metadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.recipes.Metadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCooktime();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getDifficulty();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getServes();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getKcal();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getFat();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getSaturates();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getCarbs();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getSugar();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getFibre();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getProtein();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getSalt();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
};


/**
 * optional int32 cookTime = 1;
 * @return {number}
 */
proto.recipes.Metadata.prototype.getCooktime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.recipes.Metadata} returns this
 */
proto.recipes.Metadata.prototype.setCooktime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 difficulty = 2;
 * @return {number}
 */
proto.recipes.Metadata.prototype.getDifficulty = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.recipes.Metadata} returns this
 */
proto.recipes.Metadata.prototype.setDifficulty = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 serves = 3;
 * @return {number}
 */
proto.recipes.Metadata.prototype.getServes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.recipes.Metadata} returns this
 */
proto.recipes.Metadata.prototype.setServes = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 kcal = 4;
 * @return {number}
 */
proto.recipes.Metadata.prototype.getKcal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.recipes.Metadata} returns this
 */
proto.recipes.Metadata.prototype.setKcal = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 fat = 5;
 * @return {number}
 */
proto.recipes.Metadata.prototype.getFat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.recipes.Metadata} returns this
 */
proto.recipes.Metadata.prototype.setFat = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 saturates = 6;
 * @return {number}
 */
proto.recipes.Metadata.prototype.getSaturates = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.recipes.Metadata} returns this
 */
proto.recipes.Metadata.prototype.setSaturates = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 carbs = 7;
 * @return {number}
 */
proto.recipes.Metadata.prototype.getCarbs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.recipes.Metadata} returns this
 */
proto.recipes.Metadata.prototype.setCarbs = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 sugar = 8;
 * @return {number}
 */
proto.recipes.Metadata.prototype.getSugar = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.recipes.Metadata} returns this
 */
proto.recipes.Metadata.prototype.setSugar = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 fibre = 9;
 * @return {number}
 */
proto.recipes.Metadata.prototype.getFibre = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.recipes.Metadata} returns this
 */
proto.recipes.Metadata.prototype.setFibre = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 protein = 10;
 * @return {number}
 */
proto.recipes.Metadata.prototype.getProtein = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.recipes.Metadata} returns this
 */
proto.recipes.Metadata.prototype.setProtein = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 salt = 11;
 * @return {number}
 */
proto.recipes.Metadata.prototype.getSalt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.recipes.Metadata} returns this
 */
proto.recipes.Metadata.prototype.setSalt = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


goog.object.extend(exports, proto.recipes);
